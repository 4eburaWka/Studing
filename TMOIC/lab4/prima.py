from math import inf


def get_min(R, U):
    rm = (inf, -1, -1)
    for v in U:
        rr = min(R, key=lambda x: x[0] if (x[1] == v or x[2] == v) and (x[1] not in U or x[2] not in U) else inf)
        if rm[0] > rr[0]:
            rm = rr

    return rm


# список ребер графа (длина, вершина 1, вершина 2)
# первое значение возвращается, если нет минимальных ребер
R = [(inf, -1, -1), (7, 'a', 'b'), (4, 'a', 'd'), (5, 'b', 'c'), (9, 'b', 'd'), (9, 'c', 'd'),
     (13, 'c', 'e'), (10, 'd', 'e'), (11, 'e', 'f')]

N = 6     # число вершин в графе
U = {'a'}   # множество соединенных вершин
T = []    # список ребер остова

while len(U) < N:
    r = get_min(R, U)       # ребро с минимальным весом
    if r[0] == inf:    # если ребер нет, то остов построен
        break

    T.append(r)             # добавляем ребро в остов
    U.add(r[1])             # добавляем вершины в множество U
    U.add(r[2])

print(T)